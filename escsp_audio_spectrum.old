#escsp_audio_spectrum.py
###########################################################################
#Import Libraries section
import numpy as np 
# for visualizing the data 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec
# for opening the media file 
import scipy.io.wavfile as wavfile
#file handling and misc.
import os  
import subprocess
#import moviepy
from tracemalloc import stop
import glob
import datetime
###########################################################################
#Define Global Variables
#Path to data folder
data_folder="/Users/trae/Dropbox/programs/ESCSP_Data/"
frames_folder=os.path.join(data_folder,"frames/")
movie_folder=os.path.join(data_folder,"movies/")
raw_data_folder=os.path.join(data_folder,"raw_data/")
#raw_data_folder='/Volumes/NPS_EclipseSoundScape_2017/AUDIO/FODO/'
#raw_data_folder='/Volumes/NPS_EclipseSoundScape_2017/AUDIO/HOME/'
#Start time in seconds
#start_seconds=int(8133)+45
#Number of seconds to trim data to
n_sec=45
speed_factor=int(1)
volume_factor=35
verbose=True
frames_per_second=12
#plot_title="Eclipse Data"
#plot_title="Elk Test"
#plot_title="Bison Test"
#plot_title="Eclipse Test"
#audio_filename="CONGE03903_TotalEclipse_20170818_171350.wav"
#audio_filename="CONGE03903_TotalEclipse_20170820_171350.wav"
#audio_filename="HumanCheeringInsects_ScottsBluff.wav"
#audio_filename="InsectAircraft_ScottsBluff.wav"
#audio_filename="InsectBird_GreatSmokey.wav"
#audio_filename="InsectBirdAircraft_Homestead.wav"
#audio_filename="Insects_GreatSmokey.wav"
#audio_filename="Wind_ScottsBluff.wav"
#audio_filename=".wav"
#audio_filename="People_and_Cars_Example_trimmed2.wav"
#audio_filename="Crickets-cicadas-and-grasshoppers.wav"
#audio_filename="People_and_Cars_Example_first_45.wav"
#audio_filename="Crickets-cicadas-and-grasshoppers_first_30.wav"
#audio_filename="CONGE03903_20170820_160856.wav"
#audio_filename="FODO_eclipse.wav"
#audio_filename="FODOE10882_20170821_160857.wav"
#movie_name="Eclipse test"
#movie_name="BisonYELL"
#movie_name="Elk_Test"
#Number of frames/sec
frames_per_second=3
audio_filename="Crickets-cicadas-and-grasshoppers.wav"
if verbose:
    print(audio_filename)
    print(frames_per_second)


#    start_seconds=total_eclipse_start_delta-30.
#    end_seconds=total_eclipse_start_delta+0.
#    n_sec=int(end_seconds-start_seconds)
#    print("New file length: "+str(n_sec)+' seconds')
start_seconds=0
#end_seconds=start_seconds+n_sec
end_seconds=8509
n_sec=end_seconds-start_seconds
audio_files=[os.path.join(raw_data_folder,audio_filename)]

for audio_file in audio_files:
    if verbose: print(audio_file)
    base_filename, ext = os.path.splitext(os.path.basename(audio_file))
    movie_base_name=base_filename+"_from_"+str(start_seconds).zfill(6)+"_to_"+str(end_seconds).zfill(6)
    movie_name1=os.path.join(movie_folder,movie_base_name+"_spectrogram_silent.mp4")
    movie_name2=os.path.join(movie_folder,movie_base_name+"_spectrogram.mp4")
    if verbose: print("Movie Name: "+movie_name2)
    plot_title=base_filename
    audio_file_out=os.path.join(data_folder,"audi0_clip.wav")
#print(audio_file)
###########################################################################
#Remove any previous files.
    if os.path.isfile(movie_name1):
	    os.remove(movie_name1)
    if os.path.isfile(movie_name2):
	    os.remove(movie_name2)
    if os.path.isfile(audio_file_out):
	    os.remove(audio_file_out)
###########################################################################
#Audio Processing
#Fs=Sampling rate (Frequency, sample)
#aud = Audio data
    if verbose: print("Opening wav file: ",audio_file)
    Fs_original, audio = wavfile.read(audio_file) 

    n_sec_recording=int(len(audio[:,0])/Fs_original)
    if verbose: print("Original file length: "+str(n_sec_recording)+' seconds')
#n_sec=int(len(audio[Fs*135:,0])/Fs)
    #audio_left = audio[:,0] # select left channel only
    #Combine left and right channels
    audio_mono=audio[:,0]+audio[:,1]

# datetime(year, month, day, hour, minute, second, microsecond)
    #CONGE03903_20170821_193153.wav
#    clip_start_time=datetime.datetime(2017, 8,21,16,8,57)
#    total_eclipse_start_time=datetime.datetime(2017, 8,21,18,42,38)
#    total_eclipse_start_delta=(total_eclipse_start_time-clip_start_time).total_seconds()

    recording_time=int((n_sec)/speed_factor)
    
    Fs=int(Fs_original*speed_factor)   
    if verbose:
        print("Recording time: ",recording_time ) 
        print("Fs_original: ",Fs_original )
        print("Fs: ",Fs)
#print(total_eclipse_start_delta)
#trimmed_audio = audio_out[:int(Fs*n_sec)] # trim 
#trimmed_audio= audio_out[Fs*135:] # trim 
    audio_start_index=int(start_seconds*Fs_original)
    audio_end_index=int(end_seconds*Fs_original)
    trimmed_audio = audio_mono[audio_start_index:audio_end_index]
#Save some memory space
    del(audio_mono)

    trimmed_stereo=audio[audio_start_index:audio_end_index,:]*volume_factor
#Save some memory space
    del(audio)
    wavfile.write(audio_file_out, Fs, trimmed_stereo)
#Save some memory space
    del(trimmed_stereo)
    
###########################################################################

    index=0

# Postion of plot one, the equalizer [left, bottom, width, height]
    ax1_position=[0.15, 0.79, 0.67, 0.16]
# Postion of plot two, the spectrogram [left, bottom, width, height]
    ax2_position=[0.15, 0.1, 0.85, 0.51]
    
    if verbose: 
        print("Recording time: ",str(recording_time))
        print("Frames per second: ",str(frames_per_second))
        total_iterations=frames_per_second*recording_time
        print("Total number of frames:", str(total_iterations))
    for iter_1 in range(recording_time):
        for iter_2 in range(frames_per_second):
            if verbose: print("iter_1: ",str(iter_1),", iter_2: ",str(iter_2))
            powerSpectrum, frequenciesFound, time, imageAxis = plt.specgram(trimmed_audio, Fs=Fs_original,
                xextent=[0,n_sec], mode="magnitude", scale="dB", cmap="inferno", scale_by_freq=False) 
            
            line_xs=[iter_1+(iter_2/frames_per_second),iter_1+(iter_2/frames_per_second)]
            line_ys=[min(frequenciesFound),max(frequenciesFound)]
        
            fig1 = plt.figure()
            #plt.style.use('Solarize_Light2')
            plt.style.use('dark_background')
            ax = fig1.add_axes(ax1_position)
        
            #plt.subplot(2, 1, 1)
            #plt.axes([0., 0.3, 0.3, 0.3])    # [left, bottom, width, height]
            #ax = plt.gca()
            #ax.axes.xaxis.set_ticklabels([])
            #ax.set_ylim([np.min(powerSpectrum[:,index]), np.max(powerSpectrum[:,index])])
        
            #plt.yscale("log")  
            #ax.set_yticklabels([])
            #ax.set_xticklabels([])
        
            ax.set_yticks([])

            ax.set_xlabel('Frequency')
            ax.set_ylabel('Volume')
            ax.plot(frequenciesFound,powerSpectrum[:,index],color="#ff9300")
            ax.plot(frequenciesFound,-1.0*powerSpectrum[:,index],color="#ff9300")
            ax.fill_between(frequenciesFound,powerSpectrum[:,index],-1.0*powerSpectrum[:,index],color="#ff9300")
        
            ax2 = fig1.add_axes(ax2_position)# [left, bottom, width, height]
            powerSpectrum, frequenciesFound, time, imageAxis = ax2.specgram(trimmed_audio, Fs=Fs_original,
            xextent=[0,n_sec], mode="magnitude", scale="dB", cmap="inferno", scale_by_freq=False) 

#Plot time bar overlay        
            line_x_position=iter_1+(iter_2/frames_per_second)
            line_xs=[line_x_position,line_x_position]
            line_ys=[min(frequenciesFound),max(frequenciesFound)]

       
            ax2.set_xlabel('Time (Seconds)')
            ax2.set_ylabel('Frequency')
        
            ax2.plot(line_xs,line_ys,'k')
        
            ax2.set_title('Spectrogram')
            plt.colorbar(imageAxis,label="Volume dB")
            frame_name="image_"+str(index).zfill(5)+".png"
                
            plt.savefig(os.path.join(frames_folder,frame_name))
            if verbose: print("Saving file: ",os.path.join(frames_folder,frame_name))
            #Advance internal counter 1-step
            index+=1
            if verbose: print("{:.2f}".format((float(index)/total_iterations)*100),"% Done")
            #Clear the plot's state
            plt.cla()
            plt.clf()
            plt.close("all")
            #Save some memory space
            del(powerSpectrum)
            del(frequenciesFound)
            del(imageAxis)
#
    del(trimmed_audio)
    if verbose: print("Calling ffmpeg")
    if verbose: print(movie_name1)
    frame="image_%5d.png"

    ffmpeg_call="/usr/local/bin/./ffmpeg -framerate "+str(frames_per_second)+" -i "+os.path.join(frames_folder, 
	    frame)+" "+movie_name1

    if verbose: print(ffmpeg_call)
    process=subprocess.run(ffmpeg_call,shell=True)   

    #Add the clipped audio file to the movie file
    ffmpeg_call2="/usr/local/bin/./ffmpeg -i "+movie_name1+" -i "+audio_file_out+" -c:v copy -c:a aac "+movie_name2
    
    process=subprocess.run(ffmpeg_call2,shell=True) 

    if os.path.isfile(movie_name2):
	    print(movie_name2 + " has been created.") 


#Remove frame files 
    frames_list=glob.glob(os.path.join(frames_folder,base_filename+"_image_*.png"))
    for frame in frames_list:
        try:
            os.remove(frame)
        except:
            print("Error while deleting file : ", frame)